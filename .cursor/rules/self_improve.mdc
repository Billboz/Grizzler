---
description: Guidelines for continuously improving Cursor rules based on emerging code patterns and best practices.
globs: **/*
alwaysApply: true
---
- **Git-Integrated Rule Improvement Workflow:**
  - **During subtask completion**, when suggesting a git commit message, also provide a self-improvement trigger prompt
  - **Format**: "Commit: [suggested commit message]\n\nRule Review: [trigger text for rule analysis]"
  - **Trigger examples**:
    - "New Ash pattern discovered: [describe pattern]"
    - "Repeated implementation approach: [describe approach]"
    - "New debugging technique used: [describe technique]"
    - "Error pattern that could be prevented: [describe pattern]"
    - "New library integration pattern: [describe pattern]"
  - **User workflow**: Copy commit message → Paste trigger text in chat → System updates rules → Commit all changes
  - **This ensures rule evolution happens at the natural point when implementation insights are fresh**

- **Rule Improvement Triggers:**
  - New code patterns not covered by existing rules
  - Repeated similar implementations across files
  - Common error patterns that could be prevented
  - New libraries or tools being used consistently
  - Emerging best practices in the codebase
  - **If a new Ash pattern, workaround, or lesson is generated, propose an update to Ash resources if it is not already documented.**
  - If a new library or version is added, update the Documents section and documentation usage rule accordingly.
  - **If a new Ash test/query pattern is discovered, update the ash_patterns.mdc.**

- **Analysis Process:**
  - Compare new code with existing rules
  - Identify patterns that should be standardized
  - Look for references to external documentation
  - Check for consistent error handling patterns
  - Monitor test patterns and coverage

- **Rule Updates:**
  - **Add New Rules When:**
    - A new technology/pattern is used in 3+ files
    - Common bugs could be prevented by a rule
    - Code reviews repeatedly mention the same feedback
    - New security or performance patterns emerge

  - **Modify Existing Rules When:**
    - Better examples exist in the codebase
    - Additional edge cases are discovered
    - Related rules have been updated
    - Implementation details have changed

- **Example Pattern Recognition:**
  ```elixir
  # If you see repeated Ash patterns like:
  defmodule MyApp.User do
    use Ash.Resource, domain: MyApp.Accounts
    
    attributes do
      uuid_primary_key :id
      attribute :email, :ci_string, allow_nil?: false
    end
    
    actions do
      defaults [:create, :read, :update, :destroy]
    end
  end
  
  # Consider adding to [ash_patterns.mdc](mdc:.cursor/rules/ash_patterns.mdc):
  # - Standard attribute patterns
  # - Common action configurations
  # - Policy patterns
  ```

- **Rule Quality Checks:**
  - Rules should be actionable and specific
  - Examples should come from actual code
  - References should be up to date
  - Patterns should be consistently enforced

- **Continuous Improvement:**
  - Monitor code review comments
  - Track common development questions
  - Update rules after major refactors
  - Add links to relevant documentation
  - Cross-reference related rules

- **Rule Deprecation:**
  - Mark outdated patterns as deprecated
  - Remove rules that no longer apply
  - Update references to deprecated rules
  - Document migration paths for old patterns

- **Documentation Updates:**
  - Keep examples synchronized with code
  - Update references to external docs
  - Maintain links between related rules
  - Document breaking changes

- **When analyzing errors or repeated issues, always reference [debugging.mdc](mdc:.cursor/rules/debugging.mdc) for recommended Elixir debugging tools and techniques.**
- When updating or creating rules related to troubleshooting, ensure suggestions for IO.inspect, dbg, and Tidewave are included as per [debugging.mdc](mdc:.cursor/rules/debugging.mdc).

Follow [cursor_rules.mdc](mdc:.cursor/rules/cursor_rules.mdc) for proper rule formatting and structure.
