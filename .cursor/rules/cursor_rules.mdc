---
description: Guidelines for creating and maintaining Cursor rules to ensure consistency and effectiveness.
globs: .cursor/rules/*.mdc
alwaysApply: true
---
- **Required Rule Structure:**
  ```markdown
  ---
  description: Clear, one-line description of what the rule enforces
  globs: path/to/files/*.ext, other/path/**/*
  alwaysApply: boolean
  ---

  - **Main Points in Bold**
    - Sub-points with details
    - Examples and explanations
  ```

- **Rule Mode Optimization for Agentic Effectiveness:**
  - **Critical**: Rule mode directly impacts agentic effectiveness and warning presence
  - **"Manual" mode triggers warnings** because rules are only activated when explicitly mentioned
  - **Choose optimal mode based on rule purpose and usage patterns**

  **Mode Selection Guidelines:**
  - **"Always" Mode** - Core workflow rules needed in every conversation:
    - `dev_workflow.mdc`, `cursor_rules.mdc`, `self_improve.mdc`, `taskmaster.mdc`
    - No frontmatter required, no warnings
    - Use sparingly to avoid overwhelming context

  - **"Auto Attached" Mode** - Context-specific rules (RECOMMENDED for most rules):
    - Automatically included when working on matching file patterns
    - Eliminates "Manual" mode warnings
    - Optimal for development effectiveness
    - **File Pattern Examples:**
      - Ash rules: `lib/**/*.ex, test/**/*.exs, priv/repo/migrations/*.exs`
      - Testing rules: `test/**/*.exs, priv/repo/seeds.exs`
      - Documentation rules: `.cursor/**/*.mdc, README.md, lib/**/*.ex`
      - Config rules: `config/*.exs, mix.exs`
      - Migration rules: `priv/repo/migrations/*.exs`

  - **"Agent Requested" Mode** - Specialized rules for AI-driven activation:
    - Requires clear description in Description field
    - AI can proactively decide when to fetch the rule
    - Use for highly specialized patterns

  - **"Manual" Mode** - Avoid for agentic work:
    - Generates warnings: "This rule may never be used since it has no description or auto attachments"
    - Poor agentic experience (requires explicit user mention)
    - Only use for truly exceptional cases

  **Implementation Impact:**
  - **Auto Attached** rules activate based on file context → Better agentic experience
  - **Always** rules provide core patterns → Consistent behavior
  - **Manual** rules stay dormant → Missed optimization opportunities

- **File References:**
  - Use `[filename](mdc:path/to/file)` ([filename](mdc:filename)) to reference files
  - Example: [cursor_rules.mdc](mdc:.cursor/rules/cursor_rules.mdc) for rule references
  - Example: [ash.md](mdc:.cursor/resources/ash.md) for code references

- **Code Examples:**
  - Use language-specific code blocks
  - For Ash code, always reference or cross-check with [Ash Cheatsheet](mdc:.cursor/resources/ash.md) (`.cursor/resources/ash.md`) and [Project Patterns](mdc:.cursor/resources/project_patterns.md) (`.cursor/resources/project_patterns.md`) for idiomatic patterns

- **Rule Content Guidelines:**
  - Start with high-level overview
  - Include specific, actionable requirements
  - Show examples of correct implementation
  - For Ash rules, cite or align with the project's Ash resources in `.cursor/resources/`
  - Reference existing code when possible
  - Keep rules DRY by referencing other rules

- **Rule Maintenance:**
  - Update rules when new patterns emerge
  - Add examples from actual codebase
  - Remove outdated patterns
  - Cross-reference related rules

- **Best Practices:**
  - Use bullet points for clarity
  - Keep descriptions concise
  - Include both DO and DON'T examples
  - Reference actual code over theoretical examples
  - Use consistent formatting across rules 